name: "🚀 Build & Deploy All Clients"

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  pages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Seed SEO into all subsites
        run: node .scripts/seed-seo.mjs

      # Build each client demo (skip landingpage)
      - name: Build demos
        env:
          VITE_FREECUTS_CSV_URL: ${{ secrets.VITE_FREECUTS_CSV_URL }}
          VITE_SPECIALS_CSV: ${{ secrets.VITE_SPECIALS_CSV }}
          VITE_SNEAKERS_CSV: ${{ secrets.VITE_SNEAKERS_CSV }}
          VITE_SNEAKERS_PUBKEY: ${{ secrets.VITE_SNEAKERS_PUBKEY }}
          VITE_SNEAKERS_GID: ${{ secrets.VITE_SNEAKERS_GID }}
        run: |
          for dir in project/*/; do
            slug=$(basename "$dir")
            if [ "$slug" = "landingpage" ]; then
              continue
            fi
            echo "🔨 Building demo: $slug"
            cd "$dir"

            # Kingswheels fix: clean lock + node_modules so npm fetches the proper optional rollup binary
            if [ "$slug" = "kingswheels" ]; then
              rm -rf node_modules
              rm -f package-lock.json
            fi

            # Install with guard so failures don't kill the entire loop
            npm ci || npm install || { echo "❌ Install failed for $slug — skipping"; cd ../../; continue; }

            # Build with guard so the loop continues on failure
            npm run build || { echo "❌ Build failed for $slug — skipping"; cd ../../; continue; }

            cd ../../

            rm -rf "$slug"
            mkdir -p "$slug"
            cp -r "project/$slug/dist/." "$slug/"
          done

      - name: Generate root sitemap and robots
        run: node .scripts/generate-sitemap.mjs

      # Build & copy landing page into root
      - name: Build landing page
        env:
          VITE_FREECUTS_CSV_URL: ${{ secrets.VITE_FREECUTS_CSV_URL }}
          VITE_SPECIALS_CSV: ${{ secrets.VITE_SPECIALS_CSV }}
          VITE_SNEAKERS_CSV: ${{ secrets.VITE_SNEAKERS_CSV }}
          VITE_SNEAKERS_PUBKEY: ${{ secrets.VITE_SNEAKERS_PUBKEY }}
          VITE_SNEAKERS_GID: ${{ secrets.VITE_SNEAKERS_GID }}
        run: |
          cd project/landingpage
          npm ci
          npm run build
          cd ../../
          cp -r project/landingpage/dist/* .

      # Real files for SPA marketing routes that should exist server-side
      - name: Create static shells for marketing routes
        run: |
          for route in home pricing careers; do
            mkdir -p "$route"
            cp -f index.html "$route/index.html"
          done

      # Generate indexable /clients/ hub and noindex /demos/ gallery
      - name: Generate hubs (clients + demos)
        run: node .scripts/generate-hubs.mjs

      # Install only what we need (avoids ETARGET errors)
      - name: Install OG generator deps
        run: npm i puppeteer@22 --no-save

      # Generate 1200x630 OG images + icon pack (apple-touch-icon, favicons, android, pinned-tab)
      - name: Generate OG images and icons
        run: node .scripts/gen-og-images.mjs

      # Finalize SEO across root and all subsites (adds meta + links to og images/icons)
      - name: Finalize SEO (inject tags + sitemaps)
        run: node .scripts/finalize-seo.mjs

      # Guard against accidental noindex anywhere in published HTML
      - name: Noindex guard
        shell: bash
        run: |
          set -e
          echo "Scanning for noindex in built HTML..."
          if grep -RIl --include="*.html" "name=[\"']robots[\"'][^>]*noindex" . >/dev/null 2>&1; then
            echo "Found noindex. Replacing with index,follow."
            grep -RIl --include="*.html" "name=[\"']robots[\"'][^>]*noindex" . | while read -r f; do
              sed -i 's/\(<meta[^>]*name=["'\'']robots["'\''][^>]*content=["'\'']\)[^"'\'']*noindex[^"'\'']*\(["'\''][^>]*>\)/\1index,follow\2/g' "$f"
            done
          else
            echo "No noindex found in built HTML."
          fi

      # Smart SPA 404 keeps all subpaths working
      - name: Create smart 404.html
        run: |
          SLUGS=()
          for d in */ ; do
            d="${d%/}"
            case "$d" in
              project|.git|.github|node_modules|seo|og|icons) continue ;;
            esac
            if ( [ -f "$d/index.html" ] ); then
              SLUGS+=("$d")
            fi
          done
          printf -v SLUGS_JS "'%s'," "${SLUGS[@]}"
          SLUGS_JS="[${SLUGS_JS%,}]"

          cat > 404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Redirecting…</title></head>
          <body style="font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif">
            <script>
              (function () {
                const DEMO_SLUGS = SLUGS_PLACEHOLDER;

                const raw = location.pathname.replace(/^\/+/, '');
                const parts = raw.split('/').filter(Boolean);
                const q = location.search || '';
                const h = location.hash || '';

                if (parts.length === 0) {
                  location.replace('/index.html' + q + h);
                  return;
                }

                const slug = parts[0];
                const rest = parts.slice(1).join('/');

                if (DEMO_SLUGS.includes(slug)) {
                  if (rest === '' || rest.startsWith('index.html') || rest.startsWith('404.html')) {
                    location.replace('/' + slug + '/index.html' + q + h);
                  } else {
                    location.replace('/' + slug + '/index.html#/' + rest + q + h);
                  }
                  return;
                }

                const query = q ? '&q=' + q.slice(1).replace(/&/g, '~and~') : '';
                const p = '?p=/' + raw + query + h;
                location.replace('/' + p);
              })();
            </script>
            <p>Redirecting…</p>
          </body>
          </html>
          EOF

          sed -i "s|SLUGS_PLACEHOLDER|${SLUGS_JS//\\/\\\\}|g" 404.html

      - name: Show publish directory
        run: |
          echo "=== publish contents ==="
          ls -R .
          echo "========================"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./

      - name: Set Sneakers CSV Secrets
        run: |
          echo "VITE_SNEAKERS_CSV=${{ secrets.VITE_SNEAKERS_CSV }}" >> $GITHUB_ENV
          echo "VITE_SNEAKERS_PUBKEY=${{ secrets.VITE_SNEAKERS_PUBKEY }}" >> $GITHUB_ENV
          echo "VITE_SNEAKERS_GID=${{ secrets.VITE_SNEAKERS_GID }}" >> $GITHUB_ENV
